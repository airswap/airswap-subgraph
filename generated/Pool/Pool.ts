// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class DrainTo extends ethereum.Event {
  get params(): DrainTo__Params {
    return new DrainTo__Params(this);
  }
}

export class DrainTo__Params {
  _event: DrainTo;

  constructor(event: DrainTo) {
    this._event = event;
  }

  get tokens(): Array<Address> {
    return this._event.parameters[0].value.toAddressArray();
  }

  get dest(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class SetMax extends ethereum.Event {
  get params(): SetMax__Params {
    return new SetMax__Params(this);
  }
}

export class SetMax__Params {
  _event: SetMax;

  constructor(event: SetMax) {
    this._event = event;
  }

  get max(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class SetScale extends ethereum.Event {
  get params(): SetScale__Params {
    return new SetScale__Params(this);
  }
}

export class SetScale__Params {
  _event: SetScale;

  constructor(event: SetScale) {
    this._event = event;
  }

  get scale(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class Withdraw extends ethereum.Event {
  get params(): Withdraw__Params {
    return new Withdraw__Params(this);
  }
}

export class Withdraw__Params {
  _event: Withdraw;

  constructor(event: Withdraw) {
    this._event = event;
  }

  get nonce(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get expiry(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get account(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get token(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get score(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class Pool extends ethereum.SmartContract {
  static bind(address: Address): Pool {
    return new Pool("Pool", address);
  }

  CLAIM_TYPEHASH(): Bytes {
    let result = super.call("CLAIM_TYPEHASH", "CLAIM_TYPEHASH():(bytes32)", []);

    return result[0].toBytes();
  }

  try_CLAIM_TYPEHASH(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "CLAIM_TYPEHASH",
      "CLAIM_TYPEHASH():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  DOMAIN_CHAIN_ID(): BigInt {
    let result = super.call(
      "DOMAIN_CHAIN_ID",
      "DOMAIN_CHAIN_ID():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_DOMAIN_CHAIN_ID(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "DOMAIN_CHAIN_ID",
      "DOMAIN_CHAIN_ID():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  DOMAIN_NAME(): Bytes {
    let result = super.call("DOMAIN_NAME", "DOMAIN_NAME():(bytes32)", []);

    return result[0].toBytes();
  }

  try_DOMAIN_NAME(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("DOMAIN_NAME", "DOMAIN_NAME():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  DOMAIN_SEPARATOR(): Bytes {
    let result = super.call(
      "DOMAIN_SEPARATOR",
      "DOMAIN_SEPARATOR():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_DOMAIN_SEPARATOR(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "DOMAIN_SEPARATOR",
      "DOMAIN_SEPARATOR():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  DOMAIN_TYPEHASH(): Bytes {
    let result = super.call(
      "DOMAIN_TYPEHASH",
      "DOMAIN_TYPEHASH():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_DOMAIN_TYPEHASH(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "DOMAIN_TYPEHASH",
      "DOMAIN_TYPEHASH():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  DOMAIN_VERSION(): Bytes {
    let result = super.call("DOMAIN_VERSION", "DOMAIN_VERSION():(bytes32)", []);

    return result[0].toBytes();
  }

  try_DOMAIN_VERSION(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "DOMAIN_VERSION",
      "DOMAIN_VERSION():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  admins(param0: Address): boolean {
    let result = super.call("admins", "admins(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBoolean();
  }

  try_admins(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("admins", "admins(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  calculate(score: BigInt, token: Address): BigInt {
    let result = super.call(
      "calculate",
      "calculate(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(score),
        ethereum.Value.fromAddress(token)
      ]
    );

    return result[0].toBigInt();
  }

  try_calculate(score: BigInt, token: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "calculate",
      "calculate(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(score),
        ethereum.Value.fromAddress(token)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getChainId(): BigInt {
    let result = super.call("getChainId", "getChainId():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getChainId(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getChainId", "getChainId():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  max(): BigInt {
    let result = super.call("max", "max():(uint256)", []);

    return result[0].toBigInt();
  }

  try_max(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("max", "max():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  nonceUsed(participant: Address, nonce: BigInt): boolean {
    let result = super.call("nonceUsed", "nonceUsed(address,uint256):(bool)", [
      ethereum.Value.fromAddress(participant),
      ethereum.Value.fromUnsignedBigInt(nonce)
    ]);

    return result[0].toBoolean();
  }

  try_nonceUsed(
    participant: Address,
    nonce: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "nonceUsed",
      "nonceUsed(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(participant),
        ethereum.Value.fromUnsignedBigInt(nonce)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  scale(): BigInt {
    let result = super.call("scale", "scale():(uint256)", []);

    return result[0].toBigInt();
  }

  try_scale(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("scale", "scale():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  stakingContract(): Address {
    let result = super.call(
      "stakingContract",
      "stakingContract():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_stakingContract(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "stakingContract",
      "stakingContract():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  stakingToken(): Address {
    let result = super.call("stakingToken", "stakingToken():(address)", []);

    return result[0].toAddress();
  }

  try_stakingToken(): ethereum.CallResult<Address> {
    let result = super.tryCall("stakingToken", "stakingToken():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  verify(
    nonce: BigInt,
    expiry: BigInt,
    participant: Address,
    score: BigInt,
    v: i32,
    r: Bytes,
    s: Bytes
  ): boolean {
    let result = super.call(
      "verify",
      "verify(uint256,uint256,address,uint256,uint8,bytes32,bytes32):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(nonce),
        ethereum.Value.fromUnsignedBigInt(expiry),
        ethereum.Value.fromAddress(participant),
        ethereum.Value.fromUnsignedBigInt(score),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(v)),
        ethereum.Value.fromFixedBytes(r),
        ethereum.Value.fromFixedBytes(s)
      ]
    );

    return result[0].toBoolean();
  }

  try_verify(
    nonce: BigInt,
    expiry: BigInt,
    participant: Address,
    score: BigInt,
    v: i32,
    r: Bytes,
    s: Bytes
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "verify",
      "verify(uint256,uint256,address,uint256,uint8,bytes32,bytes32):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(nonce),
        ethereum.Value.fromUnsignedBigInt(expiry),
        ethereum.Value.fromAddress(participant),
        ethereum.Value.fromUnsignedBigInt(score),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(v)),
        ethereum.Value.fromFixedBytes(r),
        ethereum.Value.fromFixedBytes(s)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  withdrawProtected(
    minimumAmount: BigInt,
    recipient: Address,
    token: Address,
    nonce: BigInt,
    expiry: BigInt,
    participant: Address,
    score: BigInt,
    v: i32,
    r: Bytes,
    s: Bytes
  ): BigInt {
    let result = super.call(
      "withdrawProtected",
      "withdrawProtected(uint256,address,address,uint256,uint256,address,uint256,uint8,bytes32,bytes32):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(minimumAmount),
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromAddress(token),
        ethereum.Value.fromUnsignedBigInt(nonce),
        ethereum.Value.fromUnsignedBigInt(expiry),
        ethereum.Value.fromAddress(participant),
        ethereum.Value.fromUnsignedBigInt(score),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(v)),
        ethereum.Value.fromFixedBytes(r),
        ethereum.Value.fromFixedBytes(s)
      ]
    );

    return result[0].toBigInt();
  }

  try_withdrawProtected(
    minimumAmount: BigInt,
    recipient: Address,
    token: Address,
    nonce: BigInt,
    expiry: BigInt,
    participant: Address,
    score: BigInt,
    v: i32,
    r: Bytes,
    s: Bytes
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "withdrawProtected",
      "withdrawProtected(uint256,address,address,uint256,uint256,address,uint256,uint8,bytes32,bytes32):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(minimumAmount),
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromAddress(token),
        ethereum.Value.fromUnsignedBigInt(nonce),
        ethereum.Value.fromUnsignedBigInt(expiry),
        ethereum.Value.fromAddress(participant),
        ethereum.Value.fromUnsignedBigInt(score),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(v)),
        ethereum.Value.fromFixedBytes(r),
        ethereum.Value.fromFixedBytes(s)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _scale(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _max(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _stakingContract(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _stakingToken(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AddAdminCall extends ethereum.Call {
  get inputs(): AddAdminCall__Inputs {
    return new AddAdminCall__Inputs(this);
  }

  get outputs(): AddAdminCall__Outputs {
    return new AddAdminCall__Outputs(this);
  }
}

export class AddAdminCall__Inputs {
  _call: AddAdminCall;

  constructor(call: AddAdminCall) {
    this._call = call;
  }

  get _admin(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AddAdminCall__Outputs {
  _call: AddAdminCall;

  constructor(call: AddAdminCall) {
    this._call = call;
  }
}

export class DrainToCall extends ethereum.Call {
  get inputs(): DrainToCall__Inputs {
    return new DrainToCall__Inputs(this);
  }

  get outputs(): DrainToCall__Outputs {
    return new DrainToCall__Outputs(this);
  }
}

export class DrainToCall__Inputs {
  _call: DrainToCall;

  constructor(call: DrainToCall) {
    this._call = call;
  }

  get tokens(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get dest(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class DrainToCall__Outputs {
  _call: DrainToCall;

  constructor(call: DrainToCall) {
    this._call = call;
  }
}

export class RemoveAdminCall extends ethereum.Call {
  get inputs(): RemoveAdminCall__Inputs {
    return new RemoveAdminCall__Inputs(this);
  }

  get outputs(): RemoveAdminCall__Outputs {
    return new RemoveAdminCall__Outputs(this);
  }
}

export class RemoveAdminCall__Inputs {
  _call: RemoveAdminCall;

  constructor(call: RemoveAdminCall) {
    this._call = call;
  }

  get _admin(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RemoveAdminCall__Outputs {
  _call: RemoveAdminCall;

  constructor(call: RemoveAdminCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetMaxCall extends ethereum.Call {
  get inputs(): SetMaxCall__Inputs {
    return new SetMaxCall__Inputs(this);
  }

  get outputs(): SetMaxCall__Outputs {
    return new SetMaxCall__Outputs(this);
  }
}

export class SetMaxCall__Inputs {
  _call: SetMaxCall;

  constructor(call: SetMaxCall) {
    this._call = call;
  }

  get _max(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetMaxCall__Outputs {
  _call: SetMaxCall;

  constructor(call: SetMaxCall) {
    this._call = call;
  }
}

export class SetScaleCall extends ethereum.Call {
  get inputs(): SetScaleCall__Inputs {
    return new SetScaleCall__Inputs(this);
  }

  get outputs(): SetScaleCall__Outputs {
    return new SetScaleCall__Outputs(this);
  }
}

export class SetScaleCall__Inputs {
  _call: SetScaleCall;

  constructor(call: SetScaleCall) {
    this._call = call;
  }

  get _scale(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetScaleCall__Outputs {
  _call: SetScaleCall;

  constructor(call: SetScaleCall) {
    this._call = call;
  }
}

export class SetStakingContractCall extends ethereum.Call {
  get inputs(): SetStakingContractCall__Inputs {
    return new SetStakingContractCall__Inputs(this);
  }

  get outputs(): SetStakingContractCall__Outputs {
    return new SetStakingContractCall__Outputs(this);
  }
}

export class SetStakingContractCall__Inputs {
  _call: SetStakingContractCall;

  constructor(call: SetStakingContractCall) {
    this._call = call;
  }

  get _stakingContract(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetStakingContractCall__Outputs {
  _call: SetStakingContractCall;

  constructor(call: SetStakingContractCall) {
    this._call = call;
  }
}

export class SetStakingTokenCall extends ethereum.Call {
  get inputs(): SetStakingTokenCall__Inputs {
    return new SetStakingTokenCall__Inputs(this);
  }

  get outputs(): SetStakingTokenCall__Outputs {
    return new SetStakingTokenCall__Outputs(this);
  }
}

export class SetStakingTokenCall__Inputs {
  _call: SetStakingTokenCall;

  constructor(call: SetStakingTokenCall) {
    this._call = call;
  }

  get _stakingToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetStakingTokenCall__Outputs {
  _call: SetStakingTokenCall;

  constructor(call: SetStakingTokenCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get nonce(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get expiry(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get score(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get v(): i32 {
    return this._call.inputValues[4].value.toI32();
  }

  get r(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }

  get s(): Bytes {
    return this._call.inputValues[6].value.toBytes();
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}

export class WithdrawAndStakeCall extends ethereum.Call {
  get inputs(): WithdrawAndStakeCall__Inputs {
    return new WithdrawAndStakeCall__Inputs(this);
  }

  get outputs(): WithdrawAndStakeCall__Outputs {
    return new WithdrawAndStakeCall__Outputs(this);
  }
}

export class WithdrawAndStakeCall__Inputs {
  _call: WithdrawAndStakeCall;

  constructor(call: WithdrawAndStakeCall) {
    this._call = call;
  }

  get minimumAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get token(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get nonce(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get expiry(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get score(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get v(): i32 {
    return this._call.inputValues[5].value.toI32();
  }

  get r(): Bytes {
    return this._call.inputValues[6].value.toBytes();
  }

  get s(): Bytes {
    return this._call.inputValues[7].value.toBytes();
  }
}

export class WithdrawAndStakeCall__Outputs {
  _call: WithdrawAndStakeCall;

  constructor(call: WithdrawAndStakeCall) {
    this._call = call;
  }
}

export class WithdrawAndStakeForCall extends ethereum.Call {
  get inputs(): WithdrawAndStakeForCall__Inputs {
    return new WithdrawAndStakeForCall__Inputs(this);
  }

  get outputs(): WithdrawAndStakeForCall__Outputs {
    return new WithdrawAndStakeForCall__Outputs(this);
  }
}

export class WithdrawAndStakeForCall__Inputs {
  _call: WithdrawAndStakeForCall;

  constructor(call: WithdrawAndStakeForCall) {
    this._call = call;
  }

  get minimumAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get token(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get account(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get nonce(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get expiry(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get score(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get v(): i32 {
    return this._call.inputValues[6].value.toI32();
  }

  get r(): Bytes {
    return this._call.inputValues[7].value.toBytes();
  }

  get s(): Bytes {
    return this._call.inputValues[8].value.toBytes();
  }
}

export class WithdrawAndStakeForCall__Outputs {
  _call: WithdrawAndStakeForCall;

  constructor(call: WithdrawAndStakeForCall) {
    this._call = call;
  }
}

export class WithdrawProtectedCall extends ethereum.Call {
  get inputs(): WithdrawProtectedCall__Inputs {
    return new WithdrawProtectedCall__Inputs(this);
  }

  get outputs(): WithdrawProtectedCall__Outputs {
    return new WithdrawProtectedCall__Outputs(this);
  }
}

export class WithdrawProtectedCall__Inputs {
  _call: WithdrawProtectedCall;

  constructor(call: WithdrawProtectedCall) {
    this._call = call;
  }

  get minimumAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get recipient(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get token(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get nonce(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get expiry(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get participant(): Address {
    return this._call.inputValues[5].value.toAddress();
  }

  get score(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }

  get v(): i32 {
    return this._call.inputValues[7].value.toI32();
  }

  get r(): Bytes {
    return this._call.inputValues[8].value.toBytes();
  }

  get s(): Bytes {
    return this._call.inputValues[9].value.toBytes();
  }
}

export class WithdrawProtectedCall__Outputs {
  _call: WithdrawProtectedCall;

  constructor(call: WithdrawProtectedCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class WithdrawWithRecipientCall extends ethereum.Call {
  get inputs(): WithdrawWithRecipientCall__Inputs {
    return new WithdrawWithRecipientCall__Inputs(this);
  }

  get outputs(): WithdrawWithRecipientCall__Outputs {
    return new WithdrawWithRecipientCall__Outputs(this);
  }
}

export class WithdrawWithRecipientCall__Inputs {
  _call: WithdrawWithRecipientCall;

  constructor(call: WithdrawWithRecipientCall) {
    this._call = call;
  }

  get minimumAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get token(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get recipient(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get nonce(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get expiry(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get score(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get v(): i32 {
    return this._call.inputValues[6].value.toI32();
  }

  get r(): Bytes {
    return this._call.inputValues[7].value.toBytes();
  }

  get s(): Bytes {
    return this._call.inputValues[8].value.toBytes();
  }
}

export class WithdrawWithRecipientCall__Outputs {
  _call: WithdrawWithRecipientCall;

  constructor(call: WithdrawWithRecipientCall) {
    this._call = call;
  }
}
