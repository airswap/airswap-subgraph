// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class CancelDurationChange extends ethereum.Event {
  get params(): CancelDurationChange__Params {
    return new CancelDurationChange__Params(this);
  }
}

export class CancelDurationChange__Params {
  _event: CancelDurationChange;

  constructor(event: CancelDurationChange) {
    this._event = event;
  }
}

export class CompleteDurationChange extends ethereum.Event {
  get params(): CompleteDurationChange__Params {
    return new CompleteDurationChange__Params(this);
  }
}

export class CompleteDurationChange__Params {
  _event: CompleteDurationChange;

  constructor(event: CompleteDurationChange) {
    this._event = event;
  }

  get newDuration(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class ProposeDelegate extends ethereum.Event {
  get params(): ProposeDelegate__Params {
    return new ProposeDelegate__Params(this);
  }
}

export class ProposeDelegate__Params {
  _event: ProposeDelegate;

  constructor(event: ProposeDelegate) {
    this._event = event;
  }

  get delegate(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class ScheduleDurationChange extends ethereum.Event {
  get params(): ScheduleDurationChange__Params {
    return new ScheduleDurationChange__Params(this);
  }
}

export class ScheduleDurationChange__Params {
  _event: ScheduleDurationChange;

  constructor(event: ScheduleDurationChange) {
    this._event = event;
  }

  get unlockTimestamp(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class SetDelegate extends ethereum.Event {
  get params(): SetDelegate__Params {
    return new SetDelegate__Params(this);
  }
}

export class SetDelegate__Params {
  _event: SetDelegate;

  constructor(event: SetDelegate) {
    this._event = event;
  }

  get delegate(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokens(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class StakingContract__getStakesResultAccountStakeStruct extends ethereum.Tuple {
  get duration(): BigInt {
    return this[0].toBigInt();
  }

  get balance(): BigInt {
    return this[1].toBigInt();
  }

  get timestamp(): BigInt {
    return this[2].toBigInt();
  }
}

export class StakingContract extends ethereum.SmartContract {
  static bind(address: Address): StakingContract {
    return new StakingContract("StakingContract", address);
  }

  accountDelegates(param0: Address): Address {
    let result = super.call(
      "accountDelegates",
      "accountDelegates(address):(address)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toAddress();
  }

  try_accountDelegates(param0: Address): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "accountDelegates",
      "accountDelegates(address):(address)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  available(account: Address): BigInt {
    let result = super.call("available", "available(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBigInt();
  }

  try_available(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("available", "available(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOf(account: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  decimals(): i32 {
    let result = super.call("decimals", "decimals():(uint8)", []);

    return result[0].toI32();
  }

  try_decimals(): ethereum.CallResult<i32> {
    let result = super.tryCall("decimals", "decimals():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  delegateAccounts(param0: Address): Address {
    let result = super.call(
      "delegateAccounts",
      "delegateAccounts(address):(address)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toAddress();
  }

  try_delegateAccounts(param0: Address): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "delegateAccounts",
      "delegateAccounts(address):(address)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  duration(): BigInt {
    let result = super.call("duration", "duration():(uint256)", []);

    return result[0].toBigInt();
  }

  try_duration(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("duration", "duration():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getStakes(
    account: Address
  ): StakingContract__getStakesResultAccountStakeStruct {
    let result = super.call(
      "getStakes",
      "getStakes(address):((uint256,uint256,uint256))",
      [ethereum.Value.fromAddress(account)]
    );

    return changetype<StakingContract__getStakesResultAccountStakeStruct>(
      result[0].toTuple()
    );
  }

  try_getStakes(
    account: Address
  ): ethereum.CallResult<StakingContract__getStakesResultAccountStakeStruct> {
    let result = super.tryCall(
      "getStakes",
      "getStakes(address):((uint256,uint256,uint256))",
      [ethereum.Value.fromAddress(account)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<StakingContract__getStakesResultAccountStakeStruct>(
        value[0].toTuple()
      )
    );
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  proposedDelegates(param0: Address): Address {
    let result = super.call(
      "proposedDelegates",
      "proposedDelegates(address):(address)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toAddress();
  }

  try_proposedDelegates(param0: Address): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "proposedDelegates",
      "proposedDelegates(address):(address)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  token(): Address {
    let result = super.call("token", "token():(address)", []);

    return result[0].toAddress();
  }

  try_token(): ethereum.CallResult<Address> {
    let result = super.tryCall("token", "token():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _name(): string {
    return this._call.inputValues[1].value.toString();
  }

  get _symbol(): string {
    return this._call.inputValues[2].value.toString();
  }

  get _duration(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _minDelay(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class CancelDurationChangeCall extends ethereum.Call {
  get inputs(): CancelDurationChangeCall__Inputs {
    return new CancelDurationChangeCall__Inputs(this);
  }

  get outputs(): CancelDurationChangeCall__Outputs {
    return new CancelDurationChangeCall__Outputs(this);
  }
}

export class CancelDurationChangeCall__Inputs {
  _call: CancelDurationChangeCall;

  constructor(call: CancelDurationChangeCall) {
    this._call = call;
  }
}

export class CancelDurationChangeCall__Outputs {
  _call: CancelDurationChangeCall;

  constructor(call: CancelDurationChangeCall) {
    this._call = call;
  }
}

export class ProposeDelegateCall extends ethereum.Call {
  get inputs(): ProposeDelegateCall__Inputs {
    return new ProposeDelegateCall__Inputs(this);
  }

  get outputs(): ProposeDelegateCall__Outputs {
    return new ProposeDelegateCall__Outputs(this);
  }
}

export class ProposeDelegateCall__Inputs {
  _call: ProposeDelegateCall;

  constructor(call: ProposeDelegateCall) {
    this._call = call;
  }

  get delegate(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ProposeDelegateCall__Outputs {
  _call: ProposeDelegateCall;

  constructor(call: ProposeDelegateCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class ScheduleDurationChangeCall extends ethereum.Call {
  get inputs(): ScheduleDurationChangeCall__Inputs {
    return new ScheduleDurationChangeCall__Inputs(this);
  }

  get outputs(): ScheduleDurationChangeCall__Outputs {
    return new ScheduleDurationChangeCall__Outputs(this);
  }
}

export class ScheduleDurationChangeCall__Inputs {
  _call: ScheduleDurationChangeCall;

  constructor(call: ScheduleDurationChangeCall) {
    this._call = call;
  }

  get delay(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ScheduleDurationChangeCall__Outputs {
  _call: ScheduleDurationChangeCall;

  constructor(call: ScheduleDurationChangeCall) {
    this._call = call;
  }
}

export class SetDelegateCall extends ethereum.Call {
  get inputs(): SetDelegateCall__Inputs {
    return new SetDelegateCall__Inputs(this);
  }

  get outputs(): SetDelegateCall__Outputs {
    return new SetDelegateCall__Outputs(this);
  }
}

export class SetDelegateCall__Inputs {
  _call: SetDelegateCall;

  constructor(call: SetDelegateCall) {
    this._call = call;
  }

  get account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetDelegateCall__Outputs {
  _call: SetDelegateCall;

  constructor(call: SetDelegateCall) {
    this._call = call;
  }
}

export class SetDurationCall extends ethereum.Call {
  get inputs(): SetDurationCall__Inputs {
    return new SetDurationCall__Inputs(this);
  }

  get outputs(): SetDurationCall__Outputs {
    return new SetDurationCall__Outputs(this);
  }
}

export class SetDurationCall__Inputs {
  _call: SetDurationCall;

  constructor(call: SetDurationCall) {
    this._call = call;
  }

  get _duration(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetDurationCall__Outputs {
  _call: SetDurationCall;

  constructor(call: SetDurationCall) {
    this._call = call;
  }
}

export class SetMetaDataCall extends ethereum.Call {
  get inputs(): SetMetaDataCall__Inputs {
    return new SetMetaDataCall__Inputs(this);
  }

  get outputs(): SetMetaDataCall__Outputs {
    return new SetMetaDataCall__Outputs(this);
  }
}

export class SetMetaDataCall__Inputs {
  _call: SetMetaDataCall;

  constructor(call: SetMetaDataCall) {
    this._call = call;
  }

  get _name(): string {
    return this._call.inputValues[0].value.toString();
  }

  get _symbol(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class SetMetaDataCall__Outputs {
  _call: SetMetaDataCall;

  constructor(call: SetMetaDataCall) {
    this._call = call;
  }
}

export class StakeCall extends ethereum.Call {
  get inputs(): StakeCall__Inputs {
    return new StakeCall__Inputs(this);
  }

  get outputs(): StakeCall__Outputs {
    return new StakeCall__Outputs(this);
  }
}

export class StakeCall__Inputs {
  _call: StakeCall;

  constructor(call: StakeCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class StakeCall__Outputs {
  _call: StakeCall;

  constructor(call: StakeCall) {
    this._call = call;
  }
}

export class StakeForCall extends ethereum.Call {
  get inputs(): StakeForCall__Inputs {
    return new StakeForCall__Inputs(this);
  }

  get outputs(): StakeForCall__Outputs {
    return new StakeForCall__Outputs(this);
  }
}

export class StakeForCall__Inputs {
  _call: StakeForCall;

  constructor(call: StakeForCall) {
    this._call = call;
  }

  get account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class StakeForCall__Outputs {
  _call: StakeForCall;

  constructor(call: StakeForCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UnsetDelegateCall extends ethereum.Call {
  get inputs(): UnsetDelegateCall__Inputs {
    return new UnsetDelegateCall__Inputs(this);
  }

  get outputs(): UnsetDelegateCall__Outputs {
    return new UnsetDelegateCall__Outputs(this);
  }
}

export class UnsetDelegateCall__Inputs {
  _call: UnsetDelegateCall;

  constructor(call: UnsetDelegateCall) {
    this._call = call;
  }

  get delegate(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UnsetDelegateCall__Outputs {
  _call: UnsetDelegateCall;

  constructor(call: UnsetDelegateCall) {
    this._call = call;
  }
}

export class UnstakeCall extends ethereum.Call {
  get inputs(): UnstakeCall__Inputs {
    return new UnstakeCall__Inputs(this);
  }

  get outputs(): UnstakeCall__Outputs {
    return new UnstakeCall__Outputs(this);
  }
}

export class UnstakeCall__Inputs {
  _call: UnstakeCall;

  constructor(call: UnstakeCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UnstakeCall__Outputs {
  _call: UnstakeCall;

  constructor(call: UnstakeCall) {
    this._call = call;
  }
}
