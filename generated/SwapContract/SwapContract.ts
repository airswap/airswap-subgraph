// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Authorize extends ethereum.Event {
  get params(): Authorize__Params {
    return new Authorize__Params(this);
  }
}

export class Authorize__Params {
  _event: Authorize;

  constructor(event: Authorize) {
    this._event = event;
  }

  get signer(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get signerWallet(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Cancel extends ethereum.Event {
  get params(): Cancel__Params {
    return new Cancel__Params(this);
  }
}

export class Cancel__Params {
  _event: Cancel;

  constructor(event: Cancel) {
    this._event = event;
  }

  get nonce(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get signerWallet(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Revoke extends ethereum.Event {
  get params(): Revoke__Params {
    return new Revoke__Params(this);
  }
}

export class Revoke__Params {
  _event: Revoke;

  constructor(event: Revoke) {
    this._event = event;
  }

  get signer(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get signerWallet(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class SetProtocolFee extends ethereum.Event {
  get params(): SetProtocolFee__Params {
    return new SetProtocolFee__Params(this);
  }
}

export class SetProtocolFee__Params {
  _event: SetProtocolFee;

  constructor(event: SetProtocolFee) {
    this._event = event;
  }

  get protocolFee(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class SetProtocolFeeLight extends ethereum.Event {
  get params(): SetProtocolFeeLight__Params {
    return new SetProtocolFeeLight__Params(this);
  }
}

export class SetProtocolFeeLight__Params {
  _event: SetProtocolFeeLight;

  constructor(event: SetProtocolFeeLight) {
    this._event = event;
  }

  get protocolFeeLight(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class SetProtocolFeeWallet extends ethereum.Event {
  get params(): SetProtocolFeeWallet__Params {
    return new SetProtocolFeeWallet__Params(this);
  }
}

export class SetProtocolFeeWallet__Params {
  _event: SetProtocolFeeWallet;

  constructor(event: SetProtocolFeeWallet) {
    this._event = event;
  }

  get feeWallet(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class SetRebateMax extends ethereum.Event {
  get params(): SetRebateMax__Params {
    return new SetRebateMax__Params(this);
  }
}

export class SetRebateMax__Params {
  _event: SetRebateMax;

  constructor(event: SetRebateMax) {
    this._event = event;
  }

  get rebateMax(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class SetRebateScale extends ethereum.Event {
  get params(): SetRebateScale__Params {
    return new SetRebateScale__Params(this);
  }
}

export class SetRebateScale__Params {
  _event: SetRebateScale;

  constructor(event: SetRebateScale) {
    this._event = event;
  }

  get rebateScale(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class SetStaking extends ethereum.Event {
  get params(): SetStaking__Params {
    return new SetStaking__Params(this);
  }
}

export class SetStaking__Params {
  _event: SetStaking;

  constructor(event: SetStaking) {
    this._event = event;
  }

  get staking(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Swap extends ethereum.Event {
  get params(): Swap__Params {
    return new Swap__Params(this);
  }
}

export class Swap__Params {
  _event: Swap;

  constructor(event: Swap) {
    this._event = event;
  }

  get nonce(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get timestamp(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get signerWallet(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get signerToken(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get signerAmount(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get protocolFee(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get senderWallet(): Address {
    return this._event.parameters[6].value.toAddress();
  }

  get senderToken(): Address {
    return this._event.parameters[7].value.toAddress();
  }

  get senderAmount(): BigInt {
    return this._event.parameters[8].value.toBigInt();
  }
}

export class SwapContract__checkResult {
  value0: BigInt;
  value1: Array<Bytes>;

  constructor(value0: BigInt, value1: Array<Bytes>) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromFixedBytesArray(this.value1));
    return map;
  }
}

export class SwapContract extends ethereum.SmartContract {
  static bind(address: Address): SwapContract {
    return new SwapContract("SwapContract", address);
  }

  DOMAIN_CHAIN_ID(): BigInt {
    let result = super.call(
      "DOMAIN_CHAIN_ID",
      "DOMAIN_CHAIN_ID():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_DOMAIN_CHAIN_ID(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "DOMAIN_CHAIN_ID",
      "DOMAIN_CHAIN_ID():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  DOMAIN_NAME(): Bytes {
    let result = super.call("DOMAIN_NAME", "DOMAIN_NAME():(bytes32)", []);

    return result[0].toBytes();
  }

  try_DOMAIN_NAME(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("DOMAIN_NAME", "DOMAIN_NAME():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  DOMAIN_SEPARATOR(): Bytes {
    let result = super.call(
      "DOMAIN_SEPARATOR",
      "DOMAIN_SEPARATOR():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_DOMAIN_SEPARATOR(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "DOMAIN_SEPARATOR",
      "DOMAIN_SEPARATOR():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  DOMAIN_TYPEHASH(): Bytes {
    let result = super.call(
      "DOMAIN_TYPEHASH",
      "DOMAIN_TYPEHASH():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_DOMAIN_TYPEHASH(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "DOMAIN_TYPEHASH",
      "DOMAIN_TYPEHASH():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  DOMAIN_VERSION(): Bytes {
    let result = super.call("DOMAIN_VERSION", "DOMAIN_VERSION():(bytes32)", []);

    return result[0].toBytes();
  }

  try_DOMAIN_VERSION(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "DOMAIN_VERSION",
      "DOMAIN_VERSION():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  FEE_DIVISOR(): BigInt {
    let result = super.call("FEE_DIVISOR", "FEE_DIVISOR():(uint256)", []);

    return result[0].toBigInt();
  }

  try_FEE_DIVISOR(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("FEE_DIVISOR", "FEE_DIVISOR():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  ORDER_TYPEHASH(): Bytes {
    let result = super.call("ORDER_TYPEHASH", "ORDER_TYPEHASH():(bytes32)", []);

    return result[0].toBytes();
  }

  try_ORDER_TYPEHASH(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "ORDER_TYPEHASH",
      "ORDER_TYPEHASH():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  authorized(param0: Address): Address {
    let result = super.call("authorized", "authorized(address):(address)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toAddress();
  }

  try_authorized(param0: Address): ethereum.CallResult<Address> {
    let result = super.tryCall("authorized", "authorized(address):(address)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  calculateDiscount(stakingBalance: BigInt, feeAmount: BigInt): BigInt {
    let result = super.call(
      "calculateDiscount",
      "calculateDiscount(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(stakingBalance),
        ethereum.Value.fromUnsignedBigInt(feeAmount)
      ]
    );

    return result[0].toBigInt();
  }

  try_calculateDiscount(
    stakingBalance: BigInt,
    feeAmount: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "calculateDiscount",
      "calculateDiscount(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(stakingBalance),
        ethereum.Value.fromUnsignedBigInt(feeAmount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  calculateProtocolFee(wallet: Address, amount: BigInt): BigInt {
    let result = super.call(
      "calculateProtocolFee",
      "calculateProtocolFee(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(wallet),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );

    return result[0].toBigInt();
  }

  try_calculateProtocolFee(
    wallet: Address,
    amount: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "calculateProtocolFee",
      "calculateProtocolFee(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(wallet),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  check(
    senderWallet: Address,
    nonce: BigInt,
    expiry: BigInt,
    signerWallet: Address,
    signerToken: Address,
    signerAmount: BigInt,
    senderToken: Address,
    senderAmount: BigInt,
    v: i32,
    r: Bytes,
    s: Bytes
  ): SwapContract__checkResult {
    let result = super.call(
      "check",
      "check(address,uint256,uint256,address,address,uint256,address,uint256,uint8,bytes32,bytes32):(uint256,bytes32[])",
      [
        ethereum.Value.fromAddress(senderWallet),
        ethereum.Value.fromUnsignedBigInt(nonce),
        ethereum.Value.fromUnsignedBigInt(expiry),
        ethereum.Value.fromAddress(signerWallet),
        ethereum.Value.fromAddress(signerToken),
        ethereum.Value.fromUnsignedBigInt(signerAmount),
        ethereum.Value.fromAddress(senderToken),
        ethereum.Value.fromUnsignedBigInt(senderAmount),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(v)),
        ethereum.Value.fromFixedBytes(r),
        ethereum.Value.fromFixedBytes(s)
      ]
    );

    return new SwapContract__checkResult(
      result[0].toBigInt(),
      result[1].toBytesArray()
    );
  }

  try_check(
    senderWallet: Address,
    nonce: BigInt,
    expiry: BigInt,
    signerWallet: Address,
    signerToken: Address,
    signerAmount: BigInt,
    senderToken: Address,
    senderAmount: BigInt,
    v: i32,
    r: Bytes,
    s: Bytes
  ): ethereum.CallResult<SwapContract__checkResult> {
    let result = super.tryCall(
      "check",
      "check(address,uint256,uint256,address,address,uint256,address,uint256,uint8,bytes32,bytes32):(uint256,bytes32[])",
      [
        ethereum.Value.fromAddress(senderWallet),
        ethereum.Value.fromUnsignedBigInt(nonce),
        ethereum.Value.fromUnsignedBigInt(expiry),
        ethereum.Value.fromAddress(signerWallet),
        ethereum.Value.fromAddress(signerToken),
        ethereum.Value.fromUnsignedBigInt(signerAmount),
        ethereum.Value.fromAddress(senderToken),
        ethereum.Value.fromUnsignedBigInt(senderAmount),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(v)),
        ethereum.Value.fromFixedBytes(r),
        ethereum.Value.fromFixedBytes(s)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new SwapContract__checkResult(
        value[0].toBigInt(),
        value[1].toBytesArray()
      )
    );
  }

  getChainId(): BigInt {
    let result = super.call("getChainId", "getChainId():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getChainId(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getChainId", "getChainId():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  nonceUsed(signer: Address, nonce: BigInt): boolean {
    let result = super.call("nonceUsed", "nonceUsed(address,uint256):(bool)", [
      ethereum.Value.fromAddress(signer),
      ethereum.Value.fromUnsignedBigInt(nonce)
    ]);

    return result[0].toBoolean();
  }

  try_nonceUsed(signer: Address, nonce: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "nonceUsed",
      "nonceUsed(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(signer),
        ethereum.Value.fromUnsignedBigInt(nonce)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  protocolFee(): BigInt {
    let result = super.call("protocolFee", "protocolFee():(uint256)", []);

    return result[0].toBigInt();
  }

  try_protocolFee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("protocolFee", "protocolFee():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  protocolFeeLight(): BigInt {
    let result = super.call(
      "protocolFeeLight",
      "protocolFeeLight():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_protocolFeeLight(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "protocolFeeLight",
      "protocolFeeLight():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  protocolFeeWallet(): Address {
    let result = super.call(
      "protocolFeeWallet",
      "protocolFeeWallet():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_protocolFeeWallet(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "protocolFeeWallet",
      "protocolFeeWallet():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  rebateMax(): BigInt {
    let result = super.call("rebateMax", "rebateMax():(uint256)", []);

    return result[0].toBigInt();
  }

  try_rebateMax(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("rebateMax", "rebateMax():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  rebateScale(): BigInt {
    let result = super.call("rebateScale", "rebateScale():(uint256)", []);

    return result[0].toBigInt();
  }

  try_rebateScale(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("rebateScale", "rebateScale():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  staking(): Address {
    let result = super.call("staking", "staking():(address)", []);

    return result[0].toAddress();
  }

  try_staking(): ethereum.CallResult<Address> {
    let result = super.tryCall("staking", "staking():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _protocolFee(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _protocolFeeLight(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _protocolFeeWallet(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _rebateScale(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _rebateMax(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get _staking(): Address {
    return this._call.inputValues[5].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AuthorizeCall extends ethereum.Call {
  get inputs(): AuthorizeCall__Inputs {
    return new AuthorizeCall__Inputs(this);
  }

  get outputs(): AuthorizeCall__Outputs {
    return new AuthorizeCall__Outputs(this);
  }
}

export class AuthorizeCall__Inputs {
  _call: AuthorizeCall;

  constructor(call: AuthorizeCall) {
    this._call = call;
  }

  get signer(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AuthorizeCall__Outputs {
  _call: AuthorizeCall;

  constructor(call: AuthorizeCall) {
    this._call = call;
  }
}

export class BuyNFTCall extends ethereum.Call {
  get inputs(): BuyNFTCall__Inputs {
    return new BuyNFTCall__Inputs(this);
  }

  get outputs(): BuyNFTCall__Outputs {
    return new BuyNFTCall__Outputs(this);
  }
}

export class BuyNFTCall__Inputs {
  _call: BuyNFTCall;

  constructor(call: BuyNFTCall) {
    this._call = call;
  }

  get nonce(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get expiry(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get signerWallet(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get signerToken(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get signerID(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get senderToken(): Address {
    return this._call.inputValues[5].value.toAddress();
  }

  get senderAmount(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }

  get v(): i32 {
    return this._call.inputValues[7].value.toI32();
  }

  get r(): Bytes {
    return this._call.inputValues[8].value.toBytes();
  }

  get s(): Bytes {
    return this._call.inputValues[9].value.toBytes();
  }
}

export class BuyNFTCall__Outputs {
  _call: BuyNFTCall;

  constructor(call: BuyNFTCall) {
    this._call = call;
  }
}

export class CancelCall extends ethereum.Call {
  get inputs(): CancelCall__Inputs {
    return new CancelCall__Inputs(this);
  }

  get outputs(): CancelCall__Outputs {
    return new CancelCall__Outputs(this);
  }
}

export class CancelCall__Inputs {
  _call: CancelCall;

  constructor(call: CancelCall) {
    this._call = call;
  }

  get nonces(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }
}

export class CancelCall__Outputs {
  _call: CancelCall;

  constructor(call: CancelCall) {
    this._call = call;
  }
}

export class LightCall extends ethereum.Call {
  get inputs(): LightCall__Inputs {
    return new LightCall__Inputs(this);
  }

  get outputs(): LightCall__Outputs {
    return new LightCall__Outputs(this);
  }
}

export class LightCall__Inputs {
  _call: LightCall;

  constructor(call: LightCall) {
    this._call = call;
  }

  get nonce(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get expiry(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get signerWallet(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get signerToken(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get signerAmount(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get senderToken(): Address {
    return this._call.inputValues[5].value.toAddress();
  }

  get senderAmount(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }

  get v(): i32 {
    return this._call.inputValues[7].value.toI32();
  }

  get r(): Bytes {
    return this._call.inputValues[8].value.toBytes();
  }

  get s(): Bytes {
    return this._call.inputValues[9].value.toBytes();
  }
}

export class LightCall__Outputs {
  _call: LightCall;

  constructor(call: LightCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RevokeCall extends ethereum.Call {
  get inputs(): RevokeCall__Inputs {
    return new RevokeCall__Inputs(this);
  }

  get outputs(): RevokeCall__Outputs {
    return new RevokeCall__Outputs(this);
  }
}

export class RevokeCall__Inputs {
  _call: RevokeCall;

  constructor(call: RevokeCall) {
    this._call = call;
  }
}

export class RevokeCall__Outputs {
  _call: RevokeCall;

  constructor(call: RevokeCall) {
    this._call = call;
  }
}

export class SellNFTCall extends ethereum.Call {
  get inputs(): SellNFTCall__Inputs {
    return new SellNFTCall__Inputs(this);
  }

  get outputs(): SellNFTCall__Outputs {
    return new SellNFTCall__Outputs(this);
  }
}

export class SellNFTCall__Inputs {
  _call: SellNFTCall;

  constructor(call: SellNFTCall) {
    this._call = call;
  }

  get nonce(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get expiry(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get signerWallet(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get signerToken(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get signerAmount(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get senderToken(): Address {
    return this._call.inputValues[5].value.toAddress();
  }

  get senderID(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }

  get v(): i32 {
    return this._call.inputValues[7].value.toI32();
  }

  get r(): Bytes {
    return this._call.inputValues[8].value.toBytes();
  }

  get s(): Bytes {
    return this._call.inputValues[9].value.toBytes();
  }
}

export class SellNFTCall__Outputs {
  _call: SellNFTCall;

  constructor(call: SellNFTCall) {
    this._call = call;
  }
}

export class SetProtocolFeeCall extends ethereum.Call {
  get inputs(): SetProtocolFeeCall__Inputs {
    return new SetProtocolFeeCall__Inputs(this);
  }

  get outputs(): SetProtocolFeeCall__Outputs {
    return new SetProtocolFeeCall__Outputs(this);
  }
}

export class SetProtocolFeeCall__Inputs {
  _call: SetProtocolFeeCall;

  constructor(call: SetProtocolFeeCall) {
    this._call = call;
  }

  get _protocolFee(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetProtocolFeeCall__Outputs {
  _call: SetProtocolFeeCall;

  constructor(call: SetProtocolFeeCall) {
    this._call = call;
  }
}

export class SetProtocolFeeLightCall extends ethereum.Call {
  get inputs(): SetProtocolFeeLightCall__Inputs {
    return new SetProtocolFeeLightCall__Inputs(this);
  }

  get outputs(): SetProtocolFeeLightCall__Outputs {
    return new SetProtocolFeeLightCall__Outputs(this);
  }
}

export class SetProtocolFeeLightCall__Inputs {
  _call: SetProtocolFeeLightCall;

  constructor(call: SetProtocolFeeLightCall) {
    this._call = call;
  }

  get _protocolFeeLight(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetProtocolFeeLightCall__Outputs {
  _call: SetProtocolFeeLightCall;

  constructor(call: SetProtocolFeeLightCall) {
    this._call = call;
  }
}

export class SetProtocolFeeWalletCall extends ethereum.Call {
  get inputs(): SetProtocolFeeWalletCall__Inputs {
    return new SetProtocolFeeWalletCall__Inputs(this);
  }

  get outputs(): SetProtocolFeeWalletCall__Outputs {
    return new SetProtocolFeeWalletCall__Outputs(this);
  }
}

export class SetProtocolFeeWalletCall__Inputs {
  _call: SetProtocolFeeWalletCall;

  constructor(call: SetProtocolFeeWalletCall) {
    this._call = call;
  }

  get _protocolFeeWallet(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetProtocolFeeWalletCall__Outputs {
  _call: SetProtocolFeeWalletCall;

  constructor(call: SetProtocolFeeWalletCall) {
    this._call = call;
  }
}

export class SetRebateMaxCall extends ethereum.Call {
  get inputs(): SetRebateMaxCall__Inputs {
    return new SetRebateMaxCall__Inputs(this);
  }

  get outputs(): SetRebateMaxCall__Outputs {
    return new SetRebateMaxCall__Outputs(this);
  }
}

export class SetRebateMaxCall__Inputs {
  _call: SetRebateMaxCall;

  constructor(call: SetRebateMaxCall) {
    this._call = call;
  }

  get _rebateMax(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetRebateMaxCall__Outputs {
  _call: SetRebateMaxCall;

  constructor(call: SetRebateMaxCall) {
    this._call = call;
  }
}

export class SetRebateScaleCall extends ethereum.Call {
  get inputs(): SetRebateScaleCall__Inputs {
    return new SetRebateScaleCall__Inputs(this);
  }

  get outputs(): SetRebateScaleCall__Outputs {
    return new SetRebateScaleCall__Outputs(this);
  }
}

export class SetRebateScaleCall__Inputs {
  _call: SetRebateScaleCall;

  constructor(call: SetRebateScaleCall) {
    this._call = call;
  }

  get _rebateScale(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetRebateScaleCall__Outputs {
  _call: SetRebateScaleCall;

  constructor(call: SetRebateScaleCall) {
    this._call = call;
  }
}

export class SetStakingCall extends ethereum.Call {
  get inputs(): SetStakingCall__Inputs {
    return new SetStakingCall__Inputs(this);
  }

  get outputs(): SetStakingCall__Outputs {
    return new SetStakingCall__Outputs(this);
  }
}

export class SetStakingCall__Inputs {
  _call: SetStakingCall;

  constructor(call: SetStakingCall) {
    this._call = call;
  }

  get newstaking(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetStakingCall__Outputs {
  _call: SetStakingCall;

  constructor(call: SetStakingCall) {
    this._call = call;
  }
}

export class SwapCall extends ethereum.Call {
  get inputs(): SwapCall__Inputs {
    return new SwapCall__Inputs(this);
  }

  get outputs(): SwapCall__Outputs {
    return new SwapCall__Outputs(this);
  }
}

export class SwapCall__Inputs {
  _call: SwapCall;

  constructor(call: SwapCall) {
    this._call = call;
  }

  get recipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get nonce(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get expiry(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get signerWallet(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get signerToken(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get signerAmount(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get senderToken(): Address {
    return this._call.inputValues[6].value.toAddress();
  }

  get senderAmount(): BigInt {
    return this._call.inputValues[7].value.toBigInt();
  }

  get v(): i32 {
    return this._call.inputValues[8].value.toI32();
  }

  get r(): Bytes {
    return this._call.inputValues[9].value.toBytes();
  }

  get s(): Bytes {
    return this._call.inputValues[10].value.toBytes();
  }
}

export class SwapCall__Outputs {
  _call: SwapCall;

  constructor(call: SwapCall) {
    this._call = call;
  }
}

export class SwapNFTsCall extends ethereum.Call {
  get inputs(): SwapNFTsCall__Inputs {
    return new SwapNFTsCall__Inputs(this);
  }

  get outputs(): SwapNFTsCall__Outputs {
    return new SwapNFTsCall__Outputs(this);
  }
}

export class SwapNFTsCall__Inputs {
  _call: SwapNFTsCall;

  constructor(call: SwapNFTsCall) {
    this._call = call;
  }

  get nonce(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get expiry(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get signerWallet(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get signerToken(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get signerID(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get senderToken(): Address {
    return this._call.inputValues[5].value.toAddress();
  }

  get senderID(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }

  get v(): i32 {
    return this._call.inputValues[7].value.toI32();
  }

  get r(): Bytes {
    return this._call.inputValues[8].value.toBytes();
  }

  get s(): Bytes {
    return this._call.inputValues[9].value.toBytes();
  }
}

export class SwapNFTsCall__Outputs {
  _call: SwapNFTsCall;

  constructor(call: SwapNFTsCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}
